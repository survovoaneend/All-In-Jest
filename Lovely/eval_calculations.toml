[manifest]
version = "1.0.0"
dump_lua = true
priority = 214748364

[[patches]] #This being a seprate file felt warentted
[patches.pattern]
target = "functions/common_events.lua"
pattern = "-- TARGET: evaluate your own general effects"
position = "before"
match_indent = true
payload = '''
if context.final_scoring_step and context.cardarea == G.play and context.full_hand then
    for i = 1, #G.play.cards do
        if G.play.cards[i].ability.set == 'Enhanced' and (G.play.cards[i].ability.jest_chaotic_card or (G.GAME.blind.config.blind.key == 'bl_aij_the_elbow' and not G.GAME.blind.disabled)) then
            G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.1,
                func = function()
                    local cen_pool = {}
                    for k, v in pairs(G.P_CENTER_POOLS["Enhanced"]) do
                        if v.key ~= 'm_stone' then 
                            cen_pool[#cen_pool+1] = v
                        end
                    end
                    center = pseudorandom_element(cen_pool, pseudoseed('jest_chaotic_card'))
                
                    G.play.cards[i]:juice_up(0.3, 0.3)
                    G.play.cards[i]:set_ability(center)
                    if G.play.cards[i].ability.jest_chaotic_card then
                        G.play.cards[i].ability.jest_chaotic_card = true
                    end
                return true
                end
            }))
        end
    end
end
if (context.skip_blind and next(SMODS.find_card("j_aij_dizzard"))) or (context.ending_booster and G.GAME.all_in_jest.dizzard_shop) then
    G.GAME.all_in_jest.dizzard_shop = true
    stop_use()
    G.deck:shuffle('cashout'..G.GAME.round_resets.ante)
    G.deck:hard_set_T()
    G.GAME.current_round.reroll_cost_increase = 0
    G.GAME.current_round.used_packs = {}
    G.GAME.current_round.free_rerolls = G.GAME.round_resets.free_rerolls
    calculate_reroll_cost(true)
    if context.skip_blind then
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object.pop_delay = 0
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext1').config.object:pop_out(5)
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object.pop_delay = 0
        G.blind_prompt_box:get_UIE_by_ID('prompt_dynatext2').config.object:pop_out(5) 
        delay(0.3)
    end
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
        func = function()
            if G.blind_select and context.skip_blind then 
                G.blind_select:remove()
                G.blind_prompt_box:remove()
                G.blind_select = nil
            end
            G.STATE = G.STATES.SHOP
            G.GAME.shop_free = nil
            G.GAME.shop_d6ed = nil
            G.STATE_COMPLETE = false
            return true
        end
    }))
end
if context.end_of_round then
    G.GAME.all_in_jest.dizzard_shop = false
    for k, v in ipairs(G.playing_cards) do
        if SMODS.has_enhancement(v, 'm_aij_simulated') then
            v.ability.extra.all_in_jest.to_hand.trigger = false
        end
    end
end
if context.setting_blind then
    if G.GAME.aij_show_hand then
        G.hand.states.visible = true
        G.GAME.aij_show_hand = nil
    end
    for k, v in pairs(G.jokers.cards) do
        if v.ability and v.ability.all_in_jest and v.ability.all_in_jest.has_been_rerolled then
            card_eval_status_text(card, "extra", nil, nil, nil, {message = localize("k_reset"), colour = G.C.FILTER})
            All_in_Jest.reroll_joker(v, v.ability.all_in_jest.has_been_rerolled, 'stage_production')
            v.ability.all_in_jest.has_been_rerolled = nil
        end
    end
end
if context.cardarea == G.play and context.all_in_jest and context.all_in_jest.main_scoring_chip_vaules and not context.repetition then
    ret.playing_card = {}
    local chips = card:get_chip_bonus()
    if chips ~= 0 then
        ret.playing_card.chips = chips
    end
end
if context.money_altered and to_big(context.amount) < to_big(0) and not context.blueprint and not context.repetition then
    G.P_BLINDS['bl_aij_aureate_coin'].boss.spent_money = G.P_BLINDS['bl_aij_aureate_coin'].boss.spent_money + context.amount
end
'''

[[patches]] #For debuffed joker cards
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if not card:can_calculate(context.ignore_debuff, context.remove_playing_cards) then"
position = "before"
match_indent = true
payload = '''
if context.joker_main and next(SMODS.find_card("j_aij_greasepaint")) and not context.blueprint then
    for k, v in pairs(SMODS.find_card("j_aij_greasepaint")) do
        if card.debuff then
            SMODS.calculate_effect({xmult = v.ability.extra.xmult}, card)
        end
    end
end
'''

[[patches]] #For debuffed played cards
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "--if card is debuffed"
position = "after"
match_indent = true
payload = '''
if scoring_hand and card.debuff then
    if in_scoring and next(SMODS.find_card("j_aij_greasepaint")) then
        for k, v in pairs(SMODS.find_card("j_aij_greasepaint")) do
            if card.debuff then
                SMODS.calculate_effect({xmult = v.ability.extra.xmult}, card)
            end
        end
    end
end
'''
