[manifest]
version = "1.0.0"
dump_lua = true
priority = 214748364

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.GAME.hands[hand].level = math.max(0, G.GAME.hands[hand].level + amount)
'''
position = "at"
payload = '''
local aij_moon_type, chip_amount, mult_amount
if type(amount) == 'table' and amount.aij_moon_type then
    aij_moon_type = amount.aij_moon_type
    amount[1] = amount[1] or 1
    if aij_moon_type == 'chips' then
        chip_amount = amount[1] * 2
        mult_amount = 0
    elseif aij_moon_type == 'mult' then
        chip_amount = 0
        mult_amount = amount[1] * 2
    end
    amount = amount[1]
else
    chip_amount = amount
    mult_amount = amount
end
G.GAME.hands[hand].level = math.max(1, G.GAME.hands[hand].level + amount)
local cl = (G.GAME.hands[hand].chips_level or 0) + chip_amount
local ml = (G.GAME.hands[hand].mult_level or 0) + mult_amount
cl, ml = math.max(0, cl + math.min(0,ml)), math.max(0, ml + math.min(0,cl))
local dcl = cl - (G.GAME.hands[hand].chips_level or 0)
local dml = ml - (G.GAME.hands[hand].mult_level or 0)
G.GAME.hands[hand].chips_level = cl
G.GAME.hands[hand].mult_level = ml
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.GAME.hands[hand].mult = math.max(G.GAME.hands[hand].s_mult + G.GAME.hands[hand].l_mult*(G.GAME.hands[hand].level - 1), 1)
'''
position = "at"
payload = ''' 
G.GAME.hands[hand].mult = math.max(G.GAME.hands[hand].s_mult + G.GAME.hands[hand].l_mult*(G.GAME.hands[hand].mult_level), 1)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)
'''
position = "at"
payload = ''' 
G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].chips_level), 0)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = 'if not instant*then'
position = 'after'
match_indent = true
payload = '''
    if dml == to_big(0) and dcl == to_big(0) then
        return
    elseif dml == to_big(0) then
        update_chips_only_helper(card, hand)
        goto aij_level_up_label
    elseif dcl == to_big(0) then
        update_mult_only_helper(card, hand)
        goto aij_level_up_label
    end'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level=G.GAME.hands[hand].level})
'''
position = 'before'
payload = '''::aij_level_up_label::'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "mult = mod_mult(mult + amount)"
position = "after"
payload = '''
if G.GAME.current_round.jest_highest_scored_mult.trigger then
    if amount > G.GAME.current_round.jest_highest_scored_mult.amount then
        G.GAME.current_round.jest_highest_scored_mult.amount = amount
    end
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if _type == 'Joker' then 
'''
position = "before"
match_indent = true
payload = '''
if G.GAME.jest_legendary_pool ~= nil and _type == 'Joker' then
    if G.GAME.jest_legendary_pool.in_shop then
        local rary = _rarity or pseudorandom('rarity'..G.GAME.round_resets.ante..(_append or '')) 
        if type(rary) == "number" and (_rarity == nil or _rarity == 4 or _rarity == "Legendary") then
            rary = (rary > G.GAME.jest_legendary_pool.rate and 4) or 1 
            if rary ~= 1 then
                _legendary = true
            end
        end
    end
end
'''


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:is_suit(suit, bypass_debuff, flush_calc)"
position = "after" 
match_indent = true
payload = '''
if G.jokers then
    local jack_joker = next(SMODS.find_card('j_aij_jack_of_all_trades')) 
    if jack_joker and self.base and self.base.value == 'Jack' then
        return true
    end
    local glass_joker = next(SMODS.find_card('j_aij_stained_glass_joker'))
    local enhancements = SMODS.get_enhancements(self)
    if glass_joker and enhancements['m_glass'] then
        return true
    end
end
'''

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.CONTROLLER:snap_to({node = G.shop:get_UIE_by_ID('next_round_button')})"
position = "before"
match_indent = true
payload = '''
SMODS.calculate_context({
    entering_shop = true,
})
'''
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.set == 'Enhanced' or self.ability.set == 'Default' then"
position = "before"
match_indent = true
payload = '''
    if self.ability and self.ability.from_guess_the_jest and self.ability.set == 'Joker' then
        self.ability.from_guess_the_jest = nil
    end
'''

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.discard = CardArea("
position = "before"
match_indent = true
payload = '''
self.jest_super_discard = CardArea(
        0, 0,
        CAI.discard_W,CAI.discard_H,
        {card_limit = 1e308, type = 'discard'})
'''

[[patches]] 
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local discard_count = #G.discard.cards"
position = "before"
payload = '''
local has_line_in_the_sand = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_line_in_the_sand" then
            has_line_in_the_sand = true
        end
    end
end
if has_line_in_the_sand and G.GAME.blind.boss then
    local discard_count = #G.jest_super_discard.cards
    for i=1, discard_count do --draw cards from deck
        draw_card(G.jest_super_discard, G.deck, i*100/discard_count,'up', nil ,nil, 0.005, i%2==0, nil, math.max((21-i)/20,0.7))
    end
end
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = "before"
payload = '''
local has_line_in_the_sand = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_line_in_the_sand" then
            has_line_in_the_sand = true
        end
    end
end
if has_line_in_the_sand then
    draw_card(G.hand, G.jest_super_discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = "after"
payload = '''
end
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if not run_info then G.GAME.round_resets.blind_states[G.GAME.blind_on_deck] = 'Select' end"
position = "after"
payload = '''
local has_blind_drawn = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_blind_drawn" and type == 'Boss' then
            has_blind_drawn = true
        end
    end
end
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = ''' {n=G.UIT.R, config={id = 'blind_name',align = "cm", padding = 0.07}, nodes={
    {n=G.UIT.R, config={align = "cm", r = 0.1, outline = 1, outline_colour = blind_col, colour = darken(blind_col, 0.3), minw = 2.9, emboss = 0.1, padding = 0.07, line_emboss = 1}, nodes={
        {n=G.UIT.O, config={object = DynaText({string = loc_name, colours = {disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE}, shadow = not disabled, float = not disabled, y_offset = -4, scale = 0.45, maxw =2.8})}},
    }},
}},
'''
position = "before"
payload = '''
has_blind_drawn and {n=G.UIT.R, config={id = 'blind_name',align = "cm", padding = 0.07}, nodes={
    {n=G.UIT.R, config={align = "cm", r = 0.1, outline = 1, outline_colour = G.C.UI.TEXT_INACTIVE, colour = darken(G.C.UI.TEXT_INACTIVE, 0.3), minw = 2.9, emboss = 0.1, padding = 0.07, line_emboss = 1}, nodes={
        {n=G.UIT.O, config={object = DynaText({string = "???", colours = {disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE}, shadow = not disabled, float = not disabled, y_offset = -4, scale = 0.45, maxw =2.8})}},
    }},
}} or
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = ''' {n=G.UIT.R, config={align = "cm", minh = 0.6}, nodes={
    {n=G.UIT.O, config={w=0.5,h=0.5, colour = G.C.BLUE, object = stake_sprite, hover = true, can_collide = false}},
    {n=G.UIT.B, config={h=0.1,w=0.1}},
    {n=G.UIT.T, config={text = number_format(blind_amt), scale = score_number_scale(0.9, blind_amt), colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.RED, shadow =  not disabled}}
}},
'''
position = "before"
payload = '''
has_blind_drawn and {n=G.UIT.R, config={align = "cm", minh = 0.6}, nodes={
    {n=G.UIT.O, config={w=0.5,h=0.5, colour = G.C.BLUE, object = stake_sprite, hover = true, can_collide = false}},
    {n=G.UIT.B, config={h=0.1,w=0.1}},
    {n=G.UIT.T, config={text = "???", scale = score_number_scale(0.9, 600), colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.RED, shadow =  not disabled}}
}} or
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = ''' _reward and {n=G.UIT.R, config={align = "cm"}, nodes={
    {n=G.UIT.T, config={text = localize('ph_blind_reward'), scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}},
    {n=G.UIT.T, config={text = string.rep(localize("$"), blind_choice.config.dollars)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}
}} or nil,
'''
position = "before"
payload = '''
has_blind_drawn and _reward and {n=G.UIT.R, config={align = "cm"}, nodes={
    {n=G.UIT.T, config={text = localize('ph_blind_reward'), scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}},
    {n=G.UIT.T, config={text = "???+", scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}
}} or
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
for k, v in ipairs(text_table) do
    blind_desc_nodes[#blind_desc_nodes+1] = {n=G.UIT.R, config={align = "cm", maxw = 2.8}, nodes={
        {n=G.UIT.T, config={text = v or '-', scale = 0.32, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}}
    }}
end
'''
position = "before"
payload = '''
if has_blind_drawn then
    for k, v in ipairs(text_table) do
        blind_desc_nodes[#blind_desc_nodes+1] = {n=G.UIT.R, config={align = "cm", maxw = 2.8}, nodes={
            {n=G.UIT.T, config={text = "???", scale = 0.32, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}}
        }}
    end
    blind_col = G.C.UI.TEXT_INACTIVE
else
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
for k, v in ipairs(text_table) do
    blind_desc_nodes[#blind_desc_nodes+1] = {n=G.UIT.R, config={align = "cm", maxw = 2.8}, nodes={
        {n=G.UIT.T, config={text = v or '-', scale = 0.32, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.WHITE, shadow = not disabled}}
    }}
end
'''
position = "after"
payload = '''
end
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
G.GAME.blind:change_dim(1.5,1.5)
'''
position = "before"
payload = '''
local has_blind_drawn = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_blind_drawn" and type == 'Boss' then
            has_blind_drawn = true
        end
    end
end
'''
match_indent = true

[[patches]] 
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
blind_choice.animation:define_draw_steps({
    {shader = 'dissolve', shadow_height = 0.05},
    {shader = 'dissolve'}
})
'''
position = "before"
payload = '''
if has_blind_drawn then
    blind_choice.animation = AnimatedSprite(0,0, 1.4, 1.4, G.ANIMATION_ATLAS["aij_blind_drawn_replacement"] or G.ANIMATION_ATLAS['blind_chips'],  { x = 0, y = 0 })
    if blind_choice.config.boss_colour ~= G.C.UI.TEXT_INACTIVE then
        blind_choice.config.jesttempvaule = blind_choice.config.boss_colour
        blind_choice.config.boss_colour = G.C.UI.TEXT_INACTIVE
    end
else
    if blind_choice.config.jesttempvaule ~= nil then
        blind_choice.config.boss_colour = blind_choice.config.jesttempvaule
        blind_choice.config.jesttempvaule = nil
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.states.focus.is and not self.children.focused_ui then" # Find a line inside Card:hover() before the tooltip logic
position = "before"
match_indent = true
payload = '''
-- Prevent tooltip for Guess the Jest cards while in the pack
if (self.ability and self.ability.from_guess_the_jest and self.area == G.pack_cards) or self.ability.jest_got_no_ui then
    return
end
'''

# Aluzinu patch
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Hieroglyph' then"
position = "before"
match_indent = true
payload = '''
local has_Aluzinu = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_aluzinnu" then
            has_Aluzinu = true
        end
    end
end
if has_Aluzinu then
    goto continue_Aluzinu
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if center_table.name == 'Petroglyph' then
    G.GAME.round_resets.discards = G.GAME.round_resets.discards - center_table.extra
    ease_discard(-center_table.extra)
end
'''
position = "after"
match_indent = true
payload = '''
::continue_Aluzinu::
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if not G.GAME.used_vouchers[v.key] then 
'''
position = "before"
match_indent = true
payload = '''
local has_Aluzinu = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_aluzinnu" then
            has_Aluzinu = true
        end
    end
end
if has_Aluzinu then
    if v.key == "v_petroglyph" or v.key == "v_hieroglyph" then
        add = true
        goto continue_has_Aluzinu
    end
    if pseudorandom('aluzinnu') < 0.05 then
        local temp_key = math.random(1,3)
        if temp_key == 1 then
            v.key = "v_petroglyph"
        else
            v.key = "v_hieroglyph"
        end
        add = true
        goto continue_has_Aluzinu
    end
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(*"
position = "after"
match_indent = true
payload = '''
    if not self.config.center.unlocked and self.config.center.rarity == 4 then
        unlock_card(self.config.center)
    end
'''

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
if card.ability_UIBox_table then
'''
position = "before"
match_indent = true
payload = '''
local has_Aluzinu = false
if G.jokers ~= nil and G.jokers.cards then
    for _, j in ipairs(G.jokers.cards) do
        if j.config and j.config.center_key == "j_aij_aluzinnu" then
            has_Aluzinu = true
        end
    end
end
if has_Aluzinu and card.ability ~= nil then
    if card.ability_UIBox_table and card.ability.name == "Hieroglyph" or card.ability.name == "Petroglyph" then
        local AUT = card.ability_UIBox_table
        if AUT.card_type == 'Voucher' then
            local debuffed = card.debuff
            local card_type_colour = get_type_colour(card.config.center or card.config, card)
            local card_type_background = 
                (AUT.card_type == 'Locked' and G.C.BLACK) or 
                ((AUT.card_type == 'Undiscovered') and darken(G.C.JOKER_GREY, 0.3)) or 
                (AUT.card_type == 'Enhanced' or AUT.card_type == 'Default') and darken(G.C.BLACK, 0.1) or
                (debuffed and darken(G.C.BLACK, 0.1)) or 
                (card_type_colour and darken(G.C.BLACK, 0.1)) or
                G.C.SET[AUT.card_type] or
                {0, 1, 1, 1}

            local outer_padding = 0.05
            local card_type = localize('k_'..string.lower(AUT.card_type))

            if AUT.card_type == 'Joker' or (AUT.badges and AUT.badges.force_rarity) then card_type = ({localize('k_common'), localize('k_uncommon'), localize('k_rare'), localize('k_legendary')})[card.config.center.rarity] end
            if AUT.card_type == 'Enhanced' then card_type = localize{type = 'name_text', key = card.config.center.key, set = 'Enhanced'} end
            card_type = (debuffed and AUT.card_type ~= 'Enhanced') and localize('k_debuffed') or card_type

            local disp_type, is_playing_card = 
                    (AUT.card_type ~= 'Locked' and AUT.card_type ~= 'Undiscovered' and AUT.card_type ~= 'Default') or debuffed,
                    AUT.card_type == 'Enhanced' or AUT.card_type == 'Default'

            local info_boxes = {}
            local badges = {}

            if AUT.badges.card_type or AUT.badges.force_rarity then
            badges[#badges + 1] = create_badge(((card.ability.name == 'Pluto' or card.ability.name == 'Ceres' or card.ability.name == 'Eris') and localize('k_dwarf_planet')) or (card.ability.name == 'Planet X' and localize('k_planet_q') or card_type),card_type_colour, nil, 1.2)
            end
            if AUT.badges then
            for k, v in ipairs(AUT.badges) do
                if v == 'negative_consumable' then v = 'negative' end
                badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))
            end
            end

            if AUT.info then
            for k, v in ipairs(AUT.info) do
                info_boxes[#info_boxes+1] =
                {n=G.UIT.R, config={align = "cm"}, nodes={
                {n=G.UIT.R, config={align = "cm", colour = lighten(G.C.JOKER_GREY, 0.5), r = 0.1, padding = 0.05, emboss = 0.05}, nodes={
                info_tip_from_rows(v, v.name),
                }}
            }}
            end
            end

            return {n=G.UIT.ROOT, config = {align = 'cm', colour = G.C.CLEAR}, nodes={
            {n=G.UIT.C, config={align = "cm", func = 'show_infotip',object = Moveable(),ref_table = next(info_boxes) and info_boxes or nil}, nodes={
                {n=G.UIT.R, config={padding = outer_padding, r = 0.12, colour = lighten(G.C.JOKER_GREY, 0.5), emboss = 0.07}, nodes={
                {n=G.UIT.R, config={align = "cm", padding = 0.07, r = 0.1, colour = adjust_alpha(card_type_background, 0.8)}, nodes={
                    name_from_rows(AUT.name, is_playing_card and G.C.WHITE or nil),
                    {n=G.UIT.R, config={align = "cm", colour = empty and G.C.CLEAR or G.C.UI.BACKGROUND_WHITE, r = 0.1, padding = 0.04, minw = 2, minh = 0.8, emboss = not empty and 0.05 or nil, filler = true}, nodes={
                        {n=G.UIT.C, config={align = "cm", maxw = maxw}, nodes={
                            {n=G.UIT.T, config={text = "-1 ",colour = G.C.FILTER, scale = 0.32}}
                        }},
                        {n=G.UIT.C, config={align = "cm", maxw = maxw}, nodes={
                            {n=G.UIT.T, config={text = "Ante",colour = G.C.UI.TEXT_DARK, scale = 0.32}}
                        }},
                    }},
                    badges[1] and {n=G.UIT.R, config={align = "cm", padding = 0.03}, nodes=badges} or nil,
                }}
                }}
            }},
            }}
        end
    end
end
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if v.no_pool_flag and G.GAME.pool_flags[v.no_pool_flag] then add = nil end
'''
position = "before"
match_indent = true
payload = '''
::continue_has_Aluzinu::
'''

# blue seals can work with moons
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[\t ]*)if v.config.hand_type == G.GAME.last_hand_played (?<post>.*)'''
position = "at"
line_prepend = '$indent'
payload = '''if v.config.hand_type == G.GAME.last_hand_played and not v.config.moon $post'''

#planets that aren't in this list are 3x 
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''center = pseudorandom_element(_pool, pseudoseed(_pool_key))'''
position = "before"
match_indent = true
payload = '''
        if _type == 'Planet' then
            local boosted_planet_keys = {
                ['c_pluto'] = true, ['c_mercury'] = true, ['c_venus'] = true, ['c_earth'] = true,
                ['c_mars'] = true,    ['c_jupiter'] = true,['c_saturn'] = true,
                ['c_uranus'] = true,  ['c_neptune'] = true,['c_planet_x'] = true,
                ['c_ceres'] = true, ['c_eris'] = true, ['c_aij_vulcanoid'] = true, 
                ['c_aij_phaethon'] = true, ['c_aij_zoozve'] = true, ['c_aij_2013_nd15'] = true, 
                ['c_aij_luna'] = true, ['c_aij_kamooalewa'] = true, ['c_aij_phobos'] = true, 
                ['c_aij_deimos'] = true, ['c_aij_europa'] = true, ['c_aij_callisto'] = true, 
                ['c_aij_titan'] = true, ['c_aij_iapetus'] = true, ['c_aij_umbriel'] = true, 
                ['c_aij_oberon'] = true, ['c_aij_triton'] = true, ['c_aij_proteus'] = true, 
                ['c_aij_nix'] = true, ['c_aij_charon'] = true, ['c_aij_planet_nine'] = true, 
                ['c_aij_nibiru'] = true, ['c_aij_pallas'] = true, ['c_aij_2000_eu16'] = true, 
                ['c_aij_dysnomia'] = true, ['c_aij_kuiper'] = true, ['c_paperback_quaoar'] = true,
                ['c_paperback_haumea'] = true, ['c_paperback_sedna'] = true, ['c_paperback_makemake'] = true,
                ['c_aij_paper_weywot'] = true, ['c_aij_paper_namaka'] = true, ['c_aij_paper_ilmare'] = true,
                ['c_aij_paper_salacia'] = true, ['c_aij_paper_ixion'] = true, ['c_aij_paper_hiiaka'] = true,
                ['c_aij_paper_varda'] = true, ['c_aij_paper_mk2'] = true, ['c_bunc_quaoar'] = true,
                ['c_bunc_haumea'] = true, ['c_bunc_sedna'] = true, ['c_bunc_makemake'] = true,
                ['c_aij_bunc_weywot'] = true, ['c_aij_bunc_namaka'] = true, ['c_aij_bunc_ilmare'] = true,
                ['c_aij_bunc_salacia'] = true, ['c_aij_bunc_ixion'] = true, ['c_aij_bunc_hiiaka'] = true,
                ['c_aij_bunc_varda'] = true, ['c_aij_bunc_mk2'] = true,
               
            }
            local weighted_pool = {}
            if _pool and #_pool > 0 then 
                for i = 1, #_pool do
                    local item = _pool[i] 
                    local item_key = nil
                    if type(item) == 'string' then
                        item_key = item
                    elseif type(item) == 'table' and item.key then 
                        item_key = item.key
                    end

                    if item_key then
                        local weight = 3
                        if boosted_planet_keys[item_key] then
                            weight = 1 
                        end
                        -- Add the original item key from the pool 'weight' times
                        for w = 1, weight do
                            table.insert(weighted_pool, item_key) 
                        end
                    else
                         -- Fallback if we somehow can't determine the key
                         table.insert(weighted_pool, item)
                    end
                end
                
                if #weighted_pool > 0 then 
                    _pool = weighted_pool
                end
            end
        end
'''
